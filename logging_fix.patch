@@
     def setup_logging(self) -> None:
         """Setup comprehensive logging configuration"""
-        try:
+        logger = logging.getLogger(__name__)          # ‚Üê guarantee binding
+        try:
@@
-            # Application startup log
-            logger = logging.getLogger(__name__)       # <- remove duplicate
-            logger.info(f"Logging initialized for {self.app_name}")
+            # Application startup log
+            logger.info(f"Logging initialized for {self.app_name}")
@@
-        except Exception as e:
+        except Exception as e:
             # Fallback to basic console logging
             print(f"Error setting up logging: {e}")
             logging.basicConfig(level=logging.INFO)
 
@@
-        except Exception as e:
-            print(f"Warning: Could not setup performance logger: {e}")
+        except Exception as e:
+            logging.getLogger(__name__).warning(
+                "setup_performance_logger_failed", exc_info=True
+            )
 
@@  (DEDENT this whole block one level so it aligns with _setup_performance_logger)
-        def _setup_security_logger(self) -> None:
+    def _setup_security_logger(self) -> None:
@@
-        except Exception as e:
-            print(f"Warning: Could not setup security logger: {e}")
+        except Exception as e:
+            logging.getLogger(__name__).warning(
+                "setup_security_logger_failed", exc_info=True
+            )
